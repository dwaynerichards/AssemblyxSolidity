/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ReturnEthxYul, ReturnEthxYulInterface } from "../ReturnEthxYul";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "acceptEth",
    outputs: [
      {
        internalType: "address",
        name: "etherSent",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060cf8061001f6000396000f3fe608060405260043610601c5760003560e01c806382af4b1f146021575b600080fd5b6027603b565b604051603291906050565b60405180910390f35b600034905090565b604a816069565b82525050565b6000602082019050606360008301846043565b92915050565b60006072826079565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff8216905091905056fea2646970667358221220073480b8959c5d39727461f074cb5a551dacffab8fac80a70ae752fc1f1db54764736f6c63430008070033";

type ReturnEthxYulConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReturnEthxYulConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ReturnEthxYul__factory extends ContractFactory {
  constructor(...args: ReturnEthxYulConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ReturnEthxYul";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ReturnEthxYul> {
    return super.deploy(overrides || {}) as Promise<ReturnEthxYul>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ReturnEthxYul {
    return super.attach(address) as ReturnEthxYul;
  }
  connect(signer: Signer): ReturnEthxYul__factory {
    return super.connect(signer) as ReturnEthxYul__factory;
  }
  static readonly contractName: "ReturnEthxYul";
  public readonly contractName: "ReturnEthxYul";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReturnEthxYulInterface {
    return new utils.Interface(_abi) as ReturnEthxYulInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReturnEthxYul {
    return new Contract(address, _abi, signerOrProvider) as ReturnEthxYul;
  }
}
